// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:sspai/bean/matrix_entity.dart';
import 'package:sspai/generated/json/matrix_entity_helper.dart';
import 'package:sspai/bean/comment_entity.dart';
import 'package:sspai/generated/json/comment_entity_helper.dart';
import 'package:sspai/bean/pay_entity.dart';
import 'package:sspai/generated/json/pay_entity_helper.dart';
import 'package:sspai/bean/homesub_entity.dart';
import 'package:sspai/generated/json/homesub_entity_helper.dart';
import 'package:sspai/bean/index_entity.dart';
import 'package:sspai/generated/json/index_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case MatrixEntity:
			return matrixEntityFromJson(data as MatrixEntity, json) as T;			case MatrixData:
			return matrixDataFromJson(data as MatrixData, json) as T;			case MatrixDataAuthor:
			return matrixDataAuthorFromJson(data as MatrixDataAuthor, json) as T;			case MatrixDataCorner:
			return matrixDataCornerFromJson(data as MatrixDataCorner, json) as T;			case CommentEntity:
			return commentEntityFromJson(data as CommentEntity, json) as T;			case CommentData:
			return commentDataFromJson(data as CommentData, json) as T;			case CommentDataUser:
			return commentDataUserFromJson(data as CommentDataUser, json) as T;			case CommantDataReply:
			return commantDataReplyFromJson(data as CommantDataReply, json) as T;			case CommentDataReplyAuthor:
			return commentDataReplyAuthorFromJson(data as CommentDataReplyAuthor, json) as T;			case CommentDataReplyUser:
			return commentDataReplyUserFromJson(data as CommentDataReplyUser, json) as T;			case CommentDataArticle:
			return commentDataArticleFromJson(data as CommentDataArticle, json) as T;			case CommentDataArticleAuthor:
			return commentDataArticleAuthorFromJson(data as CommentDataArticleAuthor, json) as T;			case CommentDataSeries:
			return commentDataSeriesFromJson(data as CommentDataSeries, json) as T;			case CommentDataSeriesAuthor:
			return commentDataSeriesAuthorFromJson(data as CommentDataSeriesAuthor, json) as T;			case PayEntity:
			return payEntityFromJson(data as PayEntity, json) as T;			case PayData:
			return payDataFromJson(data as PayData, json) as T;			case HomesubEntity:
			return homesubEntityFromJson(data as HomesubEntity, json) as T;			case HomesubData:
			return homesubDataFromJson(data as HomesubData, json) as T;			case IndexEntity:
			return indexEntityFromJson(data as IndexEntity, json) as T;			case IndexData:
			return indexDataFromJson(data as IndexData, json) as T;			case IndexDataAuthor:
			return indexDataAuthorFromJson(data as IndexDataAuthor, json) as T;    }
    return data as T;
  }  static _getToJson<T>(Type type, data) {
		switch (type) {			case MatrixEntity:
			return matrixEntityToJson(data as MatrixEntity);			case MatrixData:
			return matrixDataToJson(data as MatrixData);			case MatrixDataAuthor:
			return matrixDataAuthorToJson(data as MatrixDataAuthor);			case MatrixDataCorner:
			return matrixDataCornerToJson(data as MatrixDataCorner);			case CommentEntity:
			return commentEntityToJson(data as CommentEntity);			case CommentData:
			return commentDataToJson(data as CommentData);			case CommentDataUser:
			return commentDataUserToJson(data as CommentDataUser);			case CommantDataReply:
			return commantDataReplyToJson(data as CommantDataReply);			case CommentDataReplyAuthor:
			return commentDataReplyAuthorToJson(data as CommentDataReplyAuthor);			case CommentDataReplyUser:
			return commentDataReplyUserToJson(data as CommentDataReplyUser);			case CommentDataArticle:
			return commentDataArticleToJson(data as CommentDataArticle);			case CommentDataArticleAuthor:
			return commentDataArticleAuthorToJson(data as CommentDataArticleAuthor);			case CommentDataSeries:
			return commentDataSeriesToJson(data as CommentDataSeries);			case CommentDataSeriesAuthor:
			return commentDataSeriesAuthorToJson(data as CommentDataSeriesAuthor);			case PayEntity:
			return payEntityToJson(data as PayEntity);			case PayData:
			return payDataToJson(data as PayData);			case HomesubEntity:
			return homesubEntityToJson(data as HomesubEntity);			case HomesubData:
			return homesubDataToJson(data as HomesubData);			case IndexEntity:
			return indexEntityToJson(data as IndexEntity);			case IndexData:
			return indexDataToJson(data as IndexData);			case IndexDataAuthor:
			return indexDataAuthorToJson(data as IndexDataAuthor);    }
    return data as T;
  }  static T fromJsonAsT<T>(json) {
    switch (T.toString()) {			case 'MatrixEntity':
			return MatrixEntity().fromJson(json) as T;			case 'MatrixData':
			return MatrixData().fromJson(json) as T;			case 'MatrixDataAuthor':
			return MatrixDataAuthor().fromJson(json) as T;			case 'MatrixDataCorner':
			return MatrixDataCorner().fromJson(json) as T;			case 'CommentEntity':
			return CommentEntity().fromJson(json) as T;			case 'CommentData':
			return CommentData().fromJson(json) as T;			case 'CommentDataUser':
			return CommentDataUser().fromJson(json) as T;			case 'CommantDataReply':
			return CommantDataReply().fromJson(json) as T;			case 'CommentDataReplyAuthor':
			return CommentDataReplyAuthor().fromJson(json) as T;			case 'CommentDataReplyUser':
			return CommentDataReplyUser().fromJson(json) as T;			case 'CommentDataArticle':
			return CommentDataArticle().fromJson(json) as T;			case 'CommentDataArticleAuthor':
			return CommentDataArticleAuthor().fromJson(json) as T;			case 'CommentDataSeries':
			return CommentDataSeries().fromJson(json) as T;			case 'CommentDataSeriesAuthor':
			return CommentDataSeriesAuthor().fromJson(json) as T;			case 'PayEntity':
			return PayEntity().fromJson(json) as T;			case 'PayData':
			return PayData().fromJson(json) as T;			case 'HomesubEntity':
			return HomesubEntity().fromJson(json) as T;			case 'HomesubData':
			return HomesubData().fromJson(json) as T;			case 'IndexEntity':
			return IndexEntity().fromJson(json) as T;			case 'IndexData':
			return IndexData().fromJson(json) as T;			case 'IndexDataAuthor':
			return IndexDataAuthor().fromJson(json) as T;    }
    return null;
  }}